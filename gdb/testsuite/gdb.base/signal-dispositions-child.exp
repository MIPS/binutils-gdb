# Copyright 2016 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test that gdb's (or gdbserver's) own signal handling does not
# interfere with the signal dispositions their spawned children
# inherit.
#
# - If gdb inherits some signal set to SIG_IGN, so should the
#   inferior, even if gdb itself chooses not to ignore the signal.
#
# - If gdb inherits some signal set to SIG_DFL, so should the inferior
#   even if gdb itself ignores that signal.
#
# This requires special support in gdb/gdbserver because the exec
# family of functions do not reset the signal disposition of signals
# that are set to SIG_IGN.

standard_testfile

set gdb_txt [standard_output_file gdb.txt]
set standalone_txt [standard_output_file standalone.txt]
remote_exec host "rm -f $gdb_txt"
remote_exec host "rm -f $standalone_txt"

set options [list debug "additional_flags=-DOUTPUT_TXT=\"$gdb_txt\""]
if {[build_executable $testfile.exp $testfile $srcfile $options]} {
    untested $testfile.exp
    return -1
}

set options [list debug "additional_flags=-DOUTPUT_TXT=\"$standalone_txt\""]
if {[build_executable $testfile.exp $testfile-standalone $srcfile $options]} {
    untested $testfile.exp
    return -1
}

# Run the program directly, and dump its initial signal dispositions
# in "standalone.txt".

# Use remote_spawn instead of remote_exec, like how we spawn gdb.
# This is in order to take the same code code paths in dejagnu
# compared to when running the program through gdb.  E.g., because
# local_exec uses -ignore SIGHUP, while remote_spawn does not, if we
# used remote_exec, the test program would start with SIGHUP ignored
# when run standalone, but not when run through gdb.
set res [remote_spawn host "$binfile-standalone"]
if { $res < 0 || $res == "" } {
    perror "Spawning $binfile-standalone failed."
    return 1
}
remote_close host

# Now run the program through gdb, and dump its initial signal
# dispositions in "gdb.txt".

clean_restart $binfile

if { ! [ runto_main ] } then {
    untested $testfile.exp
    return -1
}

gdb_continue_to_end

# Diff the .txt files.  They should be identical.
gdb_test "shell diff -s $standalone_txt $gdb_txt" \
    "Files .* are identical.*" \
    "diff signal dispositions"
