# Copyright 2015-2016 Free Software Foundation, Inc.
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

standard_testfile  $gdb_test_file_name-fork.c

if {[gdb_compile_pthreads "${srcdir}/${subdir}/$srcfile" "${binfile}" executable {debug}] != "" } {
    return -1
}

clean_restart ${testfile}

if ![runto_main] {
    fail "Can't run to main"
    return -1
}

# Check if the target is native.
proc check_native_target {test} {
    global gdb_prompt

    gdb_test_multiple "maint print target-stack" $test {
        -re " native .*$gdb_prompt $" {
            pass $test
            return 1
        }
        -re "$gdb_prompt $" {
            pass $test
        }
    }

    return 0
}

# Test that GDBserver exits.
proc test_server_exit {} {
    global server_spawn_id
    if ![info exists server_spawn_id] {
	return
    }

    set test "server exits"
    gdb_expect {
	-i $server_spawn_id
	eof {
	    pass $test
	    wait -i $server_spawn_id
	    unset server_spawn_id
	}
	timeout {
	    fail "$test (timeout)"
	}
    }
}

proc test_local_detach {} {
    global testfile decimal
    clean_restart ${testfile}

    if ![runto_main] {
	fail "Can't run to main"
	return -1
    }

    gdb_test_no_output "set detach-on-fork off"
    gdb_test_no_output "set follow-fork-mode child"

    gdb_breakpoint "_exit"
    gdb_continue_to_breakpoint "_exit" ".*_exit.*"
    gdb_test_no_output "set confirm off"
    gdb_test_no_output "delete"
    gdb_test "detach" "Detaching from .*, process $decimal.*"
    gdb_test "inferior 1" "\[Switching to inferior $decimal\].*"
    # Make sure that detach works and that the parent process exited cleanly
    gdb_test "detach" "Detaching from .*, process $decimal.*exited, status=0.*"
}

proc test_local_checkpoint {} {
    global testfile decimal
    clean_restart ${testfile}

    if ![runto_main] {
	fail "Can't run to main"
	return -1
    }

    gdb_test_no_output "set detach-on-fork off"
    gdb_test_no_output "set follow-fork-mode child"
    gdb_test "checkpoint"
    gdb_breakpoint "_exit"
    gdb_continue_to_breakpoint "_exit" ".*_exit.*"
    gdb_test_no_output "set confirm off"
    gdb_test_no_output "delete"
    gdb_test "detach" "Detaching from .*, process $decimal.*"
    gdb_test "inferior 1" "\[Switching to inferior $decimal\].*"
    # Make sure that detach works and that the parent process exited cleanly
    gdb_test "detach" "Detaching from .*, process $decimal.*exited, status=0.*"
}

proc test_local_watch {} {
    global testfile decimal
    clean_restart ${testfile}

    if ![runto_main] {
	fail "Can't run to main"
	return -1
    }

    gdb_test_no_output "set detach-on-fork off"
    gdb_test_no_output "set follow-fork-mode child"

    gdb_breakpoint "_exit"
    gdb_continue_to_breakpoint "_exit" ".*_exit.*"
    gdb_test "watch globalvar" ".* watchpoint $decimal: globalvar"
    gdb_test "si"
    gdb_test_no_output "set confirm off"
    gdb_test_no_output "delete"
    gdb_test "detach" "Detaching from .*, process $decimal.*"
    gdb_test "inferior 1" "\[Switching to inferior $decimal\].*"
    # Make sure that detach works and that the parent process exited cleanly
    gdb_test "detach" "Detaching from .*, process $decimal.*exited, status=0.*"
}

proc test_remote_detach {} {
    global testfile decimal gdb_prompt
    clean_restart ${testfile}

    if ![runto_main] {
	fail "Can't run to main"
	return -1
    }

    # Test that GDBserver exits.
    gdb_breakpoint "_exit"
    gdb_continue_to_breakpoint "_exit" ".*_exit.*"
    set test "detach"
    gdb_test_multiple $test $test {
	-re "Detaching from .*, process $decimal\r\nEnding remote debugging\.\r\n$gdb_prompt $" {
	    # This is what you get with "target remote".
	    pass $test

	    # The server should exit now.
	    test_server_exit
	}
	-re "Detaching from .*, process $decimal\r\n$gdb_prompt $" {
	    pass $test
	}
    }
}


if { [check_native_target "Check if target is native"] } {

    test_local_detach
    test_local_watch
    #test_local_checkpoint
} else {

    set $srcfile $gdb_test_file_name-nofork.c
    if {[gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
	return -1
    }

    clean_restart ${testfile}

    if ![runto_main] {
	fail "Can't run to main"
	return -1
    }

    test_remote_detach
}
