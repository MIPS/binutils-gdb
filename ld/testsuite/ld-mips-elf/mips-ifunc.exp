# Expect script for MIPS IFUNC linker tests
#   Copyright 2016
#   Free Software Foundation, Inc.
#
# This file is part of the GNU Binutils.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
# MA 02110-1301, USA.
#

if {![istarget mips*-*-*] || ![is_elf_format]} {
    return
}

# General setup
#############################################
set has_newabi [expr [istarget *-*-irix6*] \
		     || [istarget mips*-*-linux*] \
		     || [istarget mips*-sde-elf*]]
set linux_gnu [expr [istarget mips*-*-linux*]]
set embedded_elf [expr [istarget mips*-*-elf]]

# Set defaults.
set abi_asflags(o32) ""
set abi_asflags(n32) "-march=from-abi -n32 -EB"
set abi_asflags(n64) "-march=from-abi -64 -EB"
set abi_ldflags(o32) ""
set abi_ldflags(n32) -melf32bmipn32
set abi_ldflags(n64) -melf64bmip

# Override as needed.
if { [istarget *-*-irix6*] } {
    set abi_asflags(o32) "-32 -EB"
    set abi_ldflags(o32) -melf32bsmip
} elseif { [istarget mips64*-linux*] } {
    set abi_asflags(o32) "-32 -EB"
    set abi_ldflags(o32) -melf32btsmip
} elseif { [istarget mips64*-*freebsd*] } {
    set abi_asflags(o32) "-32 -EB"
    set abi_ldflags(o32) -melf32btsmip_fbsd
}
if { [istarget mips*-*-linux*] || [istarget mips*-sde-elf*] } {
    set abi_ldflags(n32) -melf32btsmipn32
    set abi_ldflags(n64) -melf64btsmip
} elseif { [istarget mips64*-*freebsd*] } {
    set abi_ldflags(n32) -melf32btsmipn32_fbsd
    set abi_ldflags(n64) -melf64btsmip_fbsd
}
#############################################


# STT_GNU_IFUNC testing:
#
#    1. Dso with ifunc defined code
#    2. Dso that references external ifunc'ed routines
#    3. Dynamic executable with ifunc defined code
#    4. Static executable with ifunc defined and referenced code
#    5. Dso with with ifunc defined and referenced code
#    6. Dynamic executable with ifunc defined and referenced code
# STT_GNU_IFUNC tests.
set abis [concat o32 [expr {$has_newabi ? "n32 n64" : ""}]]
foreach { abi } $abis {
    run_ld_link_tests [list \
	[list \
	    "IFUNC 1 (DSO with def) ${abi}" \
	    "$abi_ldflags($abi) -shared -T ifunc-dyn.ld" "" \
	    "$abi_asflags($abi)" \
	    [list ifunc-dyn-def.s] \
	    [list "readelf -Ds libifunc-1-${abi}.sym"] \
	    "libifunc-1-${abi}.so" \
	] \
	[list \
	    "IFUNC 2 (DSO with ref) ${abi}" \
	    "$abi_ldflags($abi) -shared -T ifunc-dyn.ld" "" \
	    "$abi_asflags($abi)" \
	    [list ifunc-dyn-ref.s] \
	    [list "readelf -Ds libifunc-2-${abi}.sym"] \
	    "libifunc-2-${abi}.so" \
	] \
	[list \
	    "IFUNC 3 (Dynamic executable with def) ${abi}" \
	    "$abi_ldflags($abi) -Bdynamic -L./tmpdir -lifunc-2-${abi} -T ifunc-dyn.ld" "" \
	    "$abi_asflags($abi)" \
	    [list ifunc-dyn-main.s ifunc-dyn-def.s] \
	    [list "readelf -Ds ifunc-3-${abi}.sym" \
		"readelf -r ifunc-3-${abi}.r" \
		"objdump -dj.iplt ifunc-3-${abi}.t"] \
	    "ifunc-3-${abi}" \
	] \
	[list \
	    "IFUNC 4 (Static executable with def and ref) ${abi}" \
	    "$abi_ldflags($abi) -Bstatic -T ifunc-static.ld" "" \
	    "$abi_asflags($abi) -non_shared" \
	    [list ifunc-static-main.s ifunc-static-def.s ifunc-static-ref.s] \
	    [list "readelf -s ifunc-4-${abi}.sym" \
		"readelf -r ifunc-4-${abi}.r" \
		"objdump -dj.iplt ifunc-4-${abi}.t"] \
	    "ifunc-4-${abi}" \
	] \
	[list \
	    "IFUNC 5 (DSO with def and ref) ${abi}" \
	    "$abi_ldflags($abi) -shared -T ifunc-dyn.ld" "" \
	    "$abi_asflags($abi) -KPIC" \
	    [list ifunc-dyn-def.s ifunc-dyn-ref.s] \
	    [list "readelf -Ds ifunc-5-${abi}.sym" \
		"readelf -r ifunc-5-${abi}.r" \
		"readelf -d ifunc-5.dyn" \
		"objdump -sj.got ifunc-5-${abi}.g"] \
	    "ifunc-5-${abi}" \
	] \
	[list \
	    "IFUNC 6 (Dynamic executable with def and ref) ${abi}" \
	    "$abi_ldflags($abi) -Bdynamic -L./tmpdir -lifunc-2-${abi} -T ifunc-dyn.ld" "" \
	    "$abi_asflags($abi)" \
	    [list ifunc-dyn-main.s ifunc-dyn-def.s ifunc-dyn-ref.s] \
	    [list "readelf -Ds ifunc-6-${abi}.sym" \
		"readelf -d ifunc-6.dyn" \
		"readelf -r ifunc-6-${abi}.r"] \
	    "ifunc-6-${abi}" \
	] \
    ]
}

# IPLT sequences change based on how big the address of the
# .igot.plt section is based on Mips loading immediate values.
#
set addrs { "0x400000" "0x400000000" "0x4000000000000" }
foreach { addr } $addrs {
    run_ld_link_tests [list \
	[list \
	    "IFUNC IPLT (Static executable with def and ref) ${addr}" \
	    "$abi_ldflags(n64) -Bstatic -Ttext-segment ${addr}" "" \
	    "$abi_asflags(n64) -non_shared" \
	    [list ifunc-static-main.s ifunc-static-def.s ifunc-static-ref.s] \
	    [list "objdump -dj.iplt ifunc-iplt-${addr}.t"] \
	    "ifunc-iplt-${addr}" \
	] \
    ]
}


set abi o32
run_ld_link_tests [list \
	[list \
	    "IFUNC 7 (Local binding with non-PIC call-only ref) ${abi}" \
	    "$abi_ldflags($abi) -static -Bstatic" "" \
	    "$abi_asflags($abi)" \
	     [list ifunc-local-1.s] \
	     [list "readelf -r ifunc-7-${abi}.r" \
		 "readelf -S ifunc-7-${abi}.sec"] \
	    "ifunc-7-${abi}" \
	] \
	[list \
	    "IFUNC 8 (Local binding with PIC call-only ref) ${abi}" \
	    "$abi_ldflags($abi) -static" "" \
	    "$abi_asflags($abi)" \
	     [list ifunc-local-2.s] \
	     [list "readelf -r ifunc-8-${abi}.r" \
		 "readelf -S ifunc-8-${abi}.sec" \
		 "objdump -sj.got ifunc-8-${abi}.got"] \
	    "ifunc-8-${abi}" \
	] \
	[list \
	    "IFUNC 9 (Local binding with PIC/non-PIC call-only refs) ${abi}" \
	    "$abi_ldflags($abi) -static -Bstatic" "" \
	    "$abi_asflags($abi) -non_shared" \
	    [list ifunc-local-3.s] \
	    [list "readelf -r ifunc-9-${abi}.r" \
		"readelf -S ifunc-9-${abi}.sec" \
		"objdump -sj.got ifunc-9-${abi}.got" \
		"objdump -dj.iplt ifunc-9-${abi}.t"] \
	    "ifunc-9-${abi}" \
	] \
	[list \
	    "IFUNC 10 (Local binding with non-PIC call/non-call refs) ${abi}" \
	    "$abi_ldflags($abi) -static -Bstatic" "" \
	    "$abi_asflags($abi) -non_shared" \
	    [list ifunc-local-4.s] \
	    [list "readelf -r ifunc-10-${abi}.r" \
		"readelf -S ifunc-10-${abi}.sec"] \
	    "ifunc-10-${abi}" \
	] \
	[list \
	    "IFUNC 11 (Local binding with PIC-only call/non-call refs) ${abi}" \
	    "$abi_ldflags($abi) -static" "" \
	    "$abi_asflags($abi)" \
	    [list ifunc-local-5.s] \
	    [list "readelf -r ifunc-11-${abi}.r" \
		"readelf -S ifunc-11-${abi}.sec" \
		"objdump -sj.got ifunc-11-${abi}.got"] \
	    "ifunc-11-${abi}" \
	] \
	[list \
	    "IFUNC 12 (Local binding with PIC/non-PIC, call/non-call refs) ${abi}" \
	    "$abi_ldflags($abi) -static -Bstatic" "" \
	    "$abi_asflags($abi) -non_shared" \
	    [list ifunc-local-6.s] \
	    [list "readelf -r ifunc-12-${abi}.r" \
		"readelf -S ifunc-12-${abi}.sec" \
		"objdump -sj.got ifunc-12-${abi}.got"] \
	    "ifunc-12-${abi}" \
	] \
	[list \
	    "IFUNC 13 non-PIC calls to PIC IFUNC ${abi}" \
	    "$abi_ldflags($abi) -static -Bstatic" "" \
	    "$abi_asflags($abi) -non_shared" \
	    [list ifunc-dyn-def.s ifunc-dyn-ref.s ifunc-static-main.s] \
	    [list "readelf -r ifunc-13-${abi}.r" \
		"readelf -S ifunc-13-${abi}.sec" \
		"objdump -Dj.text ifunc-13-${abi}.t"] \
	    "ifunc-13-${abi}" \
	] \
	[list \
	    "IFUNC IPLT (Static executable with def and ref) mips32r6" \
	    "" "" \
	    "$abi_asflags(o32) -mips32r6" \
	    [list ifunc-static-main.s ifunc-static-def.s] \
	    [list "objdump -dj.iplt ifunc-iplt-mips32r6.t"] \
	    "ifunc-iplt-mips32r6" \
	] \
	[list \
	    "IFUNC IPLT (Static executable with def and ref) micromips" \
	    "" "" \
	    "$abi_asflags(o32) -mmicromips" \
	    [list ifunc-static-main.s ifunc-static-def.s] \
	    [list "objdump -dj.iplt ifunc-iplt-micromips.t" \
		"objdump -dj.igot ifunc-iplt-micromips.igot"] \
	    "ifunc-iplt-micromips" \
	] \
	[list \
	    "IFUNC IPLT (Static executable with def and ref) mips16" \
	    "" "" \
	    "$abi_asflags(o32) -mips32r2 -mips16" \
	    [list ifunc-static-main-mips16.s ifunc-static-def-mips16.s] \
	    [list "objdump -dj.iplt ifunc-iplt-mips16.t" \
		"objdump -dj.igot ifunc-iplt-mips16.igot"] \
	    "ifunc-iplt-mips16" \
	] \
	[list \
	    "IFUNC IPLT Mix 1 (mips32 & mips16)" \
	    "$abi_ldflags($abi) -static -Bstatic" "" \
	    "$abi_asflags($abi) -mips2" \
	    [list ifunc-mix-1.s] \
	     { { readelf -s ifunc-mix-1.sym } \
	      { objdump -sj.igot ifunc-mix-1.igot } \
	      { objdump {-dj.iplt --no-show-raw-insn} ifunc-iplt-mix-1.t } \
	      { objdump {-dj.text --no-show-raw-insn} ifunc-mix-1.t } }\
	    "ifunc-mix-1" \
	] \
	[list \
	    "IFUNC IPLT Mix 2 (mips32 & micromips)" \
	    "$abi_ldflags($abi) -static -Bstatic" "" \
	    "$abi_asflags($abi) -mips2" \
	    [list ifunc-mix-2.s] \
	     { { readelf -s ifunc-mix-2.sym } \
	       { objdump -sj.igot ifunc-mix-2.igot } \
	       { objdump { -dj.iplt --no-show-raw-insn } ifunc-iplt-mix-2.t } \
	       { objdump { -dj.text --no-show-raw-insn } ifunc-mix-2.t } } \
	    "ifunc-mix-2" \
	] \
]


# set abi n32
# run_ld_link_tests [list \
# 	[list \
# 	    "IFUNC 9 (Local binding with PIC/non-PIC call-only refs) ${abi}" \
# 	    "$abi_ldflags($abi) -static -Bstatic -" "" \
# 	    "$abi_asflags($abi) -non_shared" \
# 	    [list ifunc-local-3.s] \
# 	    [list "readelf -r ifunc-9-${abi}.r" \
# 		"readelf -S ifunc-9-${abi}.sec" \
# 		"readelf -S ifunc-9-${abi}-x.sec" \
# 		"objdump -sj.got ifunc-9-${abi}.got" \
# 		"objdump -dj.iplt ifunc-9-${abi}.t"] \
# 	    "ifunc-9-${abi}" \
# 	] \
# 		       ]

# set abi n64
# run_ld_link_tests [list \
# 	[list \
# 	    "IFUNC 9 (Local binding with PIC/non-PIC call-only refs) ${abi}" \
# 	    "$abi_ldflags($abi) -static -Bstatic -" "" \
# 	    "$abi_asflags($abi) -non_shared" \
# 	    [list ifunc-local-3.s] \
# 	    [list "readelf -r ifunc-9-${abi}.r" \
# 		"readelf -S ifunc-9-${abi}.sec" \
# 		"readelf -S ifunc-9-${abi}-x.sec" \
# 		"objdump -sj.got ifunc-9-${abi}.got" \
# 		"objdump -dj.iplt ifunc-9-${abi}.t"] \
# 	    "ifunc-9-${abi}" \
# 	] \
# 		       ]
