// nanomips-insn.def -- Nanomips instruction definitions.

// Copyright (C) 2018 Free Software Foundation, Inc.
// Written by Vladimir Radosavljevic <vladimir.radosavljevic@mips.com>

// This file is part of gold.

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
// MA 02110-1301, USA.

//
//
// Helper macros.
//
//

// Define relocation.
#define R(name) elfcpp::R_NANOMIPS_##name

// Helper macros for nanomips instruction templates (NIT).

// Insert register function.
#define INS_REG(pos, size, reg) (insert_reg<pos, size, RM_##reg>)

// Nanomips instruction template.
#define NIT(name, opcode, reloc, size, tregfunc, sregfunc) \
  Nanomips_insn_template::nanomips_insn##size(name, opcode, R(reloc), tregfunc, sregfunc)
#define NIT48(name, opcode, reloc, tregfunc) NIT(name, opcode, reloc, 48, tregfunc, NULL)
#define NIT32(name, opcode, reloc, tregfunc, sregfunc) NIT(name, opcode, reloc, 32, tregfunc, sregfunc)
#define NIT16(name, opcode, reloc, tregfunc, sregfunc) NIT(name, opcode, reloc, 16, tregfunc, sregfunc)

// Helper macros for nanomips transform templates (NTT).

#define INSNS(...) { __VA_ARGS__ }
#define RELS(...) { __VA_ARGS__ }

// Helper macros for nanomips instruction property (NIP).

// Extract register function.
#define EXT_REG(pos, size) (extract_reg<pos, size>)

// Nanomips instruction property.
#define NIP48(name, opcode, ext_treg_func) \
  NIP(name, opcode, ext_treg_func, NULL, NULL, NULL, NULL, NULL)
#define NIP32(name, opcode, ext_treg_func, val_treg_func, ext_sreg_func, val_sreg_func) \
  NIP(name, opcode, ext_treg_func, NULL, val_treg_func, ext_sreg_func, NULL, val_sreg_func)
#define NIP16(name, opcode, ext_treg_func, conv_treg_func, ext_sreg_func, conv_sreg_func) \
  NIP(name, opcode, ext_treg_func, conv_treg_func, NULL, ext_sreg_func, conv_sreg_func, NULL)

//
//
// Nanomips instruction templates
//
//

// addiugp[48] $reg, %gprel32(sym)
#define ADDIUGP48(reloc, tregmap) NIT48("addiugp[48]", 0x6002, reloc, INS_REG(5, 5, tregmap))
// lapc[48] $reg, sym
#define LAPC48 NIT48("lapc[48]", 0x6003, PC_I32, INS_REG(5, 5, TREG))
// li[48] $reg, sym
#define LI48 NIT48("li[48]", 0x6000, I32, INS_REG(5, 5, TREG))
// lwpc[48] $reg, %reloc(sym)
#define LWPC48(reloc) NIT48("lwpc[48]", 0x600b, reloc, INS_REG(5, 5, TREG))
// swpc[48] $reg, sym
#define SWPC48 NIT48("swpc[48]", 0x600f, PC_I32, INS_REG(5, 5, TREG))
// addiu[gp.b] $reg, $gp, %gprel(sym)
#define ADDIUGPB32 NIT32("addiu[gp.b]", 0x440c0000, GPREL18, INS_REG(21, 5, TREG), NULL)
// addiu[gp.w] $reg, $gp, %gprel(sym)
#define ADDIUGPW32 NIT32("addiu[gp.w]", 0x40000000, GPREL19_S2, INS_REG(21, 5, TREG), NULL)
// addu $reg, $reg, $gp
#define ADDU32(tregmap, sregmap) NIT32("addu", 0x23800150, NONE, INS_REG(16, 5, tregmap), INS_REG(11, 5, sregmap))
// aluipc $reg, %reloc(sym)
#define ALUIPC32(reloc, tregmap) NIT32("aluipc", 0xe0000002, reloc, INS_REG(21, 5, tregmap), NULL)
// balc sym
#define BALC32 NIT32("balc", 0x2a000000, PC25_S1, NULL, NULL)
// bc sym
#define BC32 NIT32("bc", 0x28000000, PC25_S1, NULL, NULL)
// bbeqzc $reg, bit, sym
#define BBEQZC32 NIT32("bbeqzc", 0xc8040000, NONE, INS_REG(21, 5, TREG), INS_REG(11, 6, SREG))
// bbnezc $reg, bit, sym
#define BBNEZC32 NIT32("bbnezc", 0xc8140000, NONE, INS_REG(21, 5, TREG), INS_REG(11, 6, SREG))
// beqc $reg, $reg, sym
#define BEQC32(reloc) NIT32("beqc", 0x88000000, reloc, INS_REG(21, 5, TREG), INS_REG(16, 5, SREG))
// beqic $reg, u, sym
#define BEQIC32 NIT32("beqic", 0xc8000000, NONE, INS_REG(21, 5, TREG), INS_REG(11, 7, SREG))
// bgec $reg, $reg, sym
#define BGEC32 NIT32("bgec", 0x88008000, NONE, INS_REG(21, 5, TREG), INS_REG(16, 5, SREG))
// bgeuc $reg, $reg, sym
#define BGEUC32 NIT32("bgeuc", 0x8800c000, NONE, INS_REG(21, 5, TREG), INS_REG(16, 5, SREG))
// bgeic $reg, u, sym
#define BGEIC32 NIT32("bgeic", 0xc8080000, NONE, INS_REG(21, 5, TREG), INS_REG(11, 7, SREG))
// bgeiuc $reg, u, sym
#define BGEIUC32 NIT32("bgeiuc", 0xc80c0000, NONE, INS_REG(21, 5, TREG), INS_REG(11, 7, SREG))
// bltc $reg, $reg, sym
#define BLTC32 NIT32("bltc", 0xa8008000, NONE, INS_REG(21, 5, TREG), INS_REG(16, 5, SREG))
// bltuc $reg, $reg, sym
#define BLTUC32 NIT32("bltuc", 0xa800c000, NONE, INS_REG(21, 5, TREG), INS_REG(16, 5, SREG))
// bltic $reg, u, sym
#define BLTIC32 NIT32("bltic", 0xc8180000, NONE, INS_REG(21, 5, TREG), INS_REG(11, 7, SREG))
// bltiuc $reg, u, sym
#define BLTIUC32 NIT32("bltiuc", 0xc81c0000, NONE, INS_REG(21, 5, TREG), INS_REG(11, 7, SREG))
// bnec $reg, $reg, sym
#define BNEC32(reloc) NIT32("bnec", 0xa8000000, reloc, INS_REG(21, 5, TREG), INS_REG(16, 5, SREG))
// bneic $reg, u, sym
#define BNEIC32 NIT32("bneic", 0xc8100000, NONE, INS_REG(21, 5, TREG), INS_REG(11, 7, SREG))
// jalrc $ra, $reg
#define JALRC32 NIT32("jalrc", 0x4be00000, NONE, NULL, INS_REG(16, 5, SREG))
// jalrc $zero, $reg
#define JRC32 NIT32("jrc", 0x48000000, NONE, NULL, INS_REG(16, 5, SREG))
// lapc $reg, sym
#define LAPC32(tregmap) NIT32("lapc", 0x04000000, PC21_S1, INS_REG(21, 5, tregmap), NULL)
// lui $reg, %reloc(sym)
#define LUI32(reloc, tregmap) NIT32("lui", 0xe0000000, reloc, INS_REG(21, 5, tregmap), NULL)
// lb $reg, %gprel(sym)($gp)
#define LBGP32 NIT32("lb[gp]", 0x44000000, GPREL18, INS_REG(21, 5, TREG), NULL)
// lb $reg, %reloc(sym)($reg)
#define LB32(reloc) NIT32("lb", 0x84000000, reloc, INS_REG(21, 5, TREG), INS_REG(16, 5, SREG))
// lbu $reg, %gprel(sym)($gp)
#define LBUGP32 NIT32("lbu[gp]", 0x44080000, GPREL18, INS_REG(21, 5, TREG), NULL)
// lbu $reg, %reloc(sym)($reg)
#define LBU32(reloc) NIT32("lbu", 0x84002000, reloc, INS_REG(21, 5, TREG), INS_REG(16, 5, SREG))
// lh $reg, %gprel(sym)($gp)
#define LHGP32 NIT32("lh[gp]", 0x44100000, GPREL17_S1, INS_REG(21, 5, TREG), NULL)
// lh $reg, %reloc(sym)($reg)
#define LH32(reloc) NIT32("lh", 0x84004000, reloc, INS_REG(21, 5, TREG), INS_REG(16, 5, SREG))
// lhu $reg, %gprel(sym)($gp)
#define LHUGP32 NIT32("lhu[gp]", 0x44100001, GPREL17_S1, INS_REG(21, 5, TREG), NULL)
// lhu $reg, %reloc(sym)($reg)
#define LHU32(reloc) NIT32("lhu", 0x84006000, reloc, INS_REG(21, 5, TREG), INS_REG(16, 5, SREG))
// lw $reg, %gprel(sym)($gp)
#define LWGP32 NIT32("lw[gp]", 0x40000002, GPREL19_S2, INS_REG(21, 5, TREG), NULL)
// lw $reg, %reloc(sym)($reg)
#define LW32(reloc) NIT32("lw", 0x84008000, reloc, INS_REG(21, 5, TREG), INS_REG(16, 5, SREG))
// ori $reg, $reg, %reloc(sym)
#define ORI32(reloc, tregmap, sregmap) NIT32("ori", 0x80000000, reloc, INS_REG(21, 5, tregmap), INS_REG(16, 5, sregmap))
// restore u, dst1, [dst2, ...] where gp = 0
#define RESTORE32 NIT32("restore", 0x80003002, NONE, INS_REG(16, 4, TREG), ins_sres_fields)
// restore.jrc u, dst1, [dst2, ...] where gp = 0
#define RESTOREJRC32 NIT32("restore.jrc", 0x80003003, NONE, INS_REG(16, 4, TREG), ins_sres_fields)
// save u, src1, [src2, ...] where gp = 0
#define SAVE32 NIT32("save", 0x80003000, NONE, INS_REG(16, 4, TREG), ins_sres_fields)
// sb $reg, %gprel(sym)($gp)
#define SBGP32 NIT32("sb[gp]", 0x44040000, GPREL18, INS_REG(21, 5, TREG), NULL)
// sb $reg, %reloc(sym)($reg)
#define SB32(reloc) NIT32("sb", 0x84001000, reloc, INS_REG(21, 5, TREG), INS_REG(16, 5, SREG))
// sh $reg, %gprel(sym)($gp)
#define SHGP32 NIT32("sh[gp]", 0x44140000, GPREL17_S1, INS_REG(21, 5, TREG), NULL)
// sh $reg, %reloc(sym)($reg)
#define SH32(reloc) NIT32("sh", 0x84005000, reloc, INS_REG(21, 5, TREG), INS_REG(16, 5, SREG))
// sw $reg, %gprel(sym)($gp)
#define SWGP32 NIT32("sw[gp]", 0x40000003, GPREL19_S2, INS_REG(21, 5, TREG), NULL)
// sw $reg, %reloc(sym)($reg)
#define SW32(reloc) NIT32("sw", 0x84009000, reloc, INS_REG(21, 5, TREG), INS_REG(16, 5, SREG))
// balc16 sym
#define BALC16 NIT16("balc[16]", 0x3800, PC10_S1, NULL, NULL)
// bc16 sym
#define BC16 NIT16("bc[16]", 0x1800, PC10_S1, NULL, NULL)
// beqc16 $reg, $reg, sym
#define BEQC16 NIT16("beqc[16]", 0xd800, PC4_S1, INS_REG(7, 3, TREG), INS_REG(4, 3, SREG))
// bnec16 $reg, $reg, sym
#define BNEC16 NIT16("bnec[16]", 0xd800, PC4_S1, INS_REG(7, 3, TREG), INS_REG(4, 3, SREG))
// lb16 $reg, 0(sym)($reg)
#define LB16 NIT16("lb[16]", 0x5c00, NONE, INS_REG(7, 3, TREG), INS_REG(4, 3, SREG))
// lbu16 $reg, 0(sym)($reg)
#define LBU16 NIT16("lbu[16]", 0x5c08, NONE, INS_REG(7, 3, TREG), INS_REG(4, 3, SREG))
// lh16 $reg, 0(sym)($reg)
#define LH16 NIT16("lh[16]", 0x7c00, NONE, INS_REG(7, 3, TREG), INS_REG(4, 3, SREG))
// lhu16 $reg, 0(sym)($reg)
#define LHU16 NIT16("lhu[16]", 0x7c08, NONE, INS_REG(7, 3, TREG), INS_REG(4, 3, SREG))
// lw16 $reg, %gprel(sym)($gp)
#define LWGP16 NIT16("lw[gp16]", 0x5400, GPREL7_S2, INS_REG(7, 3, TREG), NULL)
// lw16 $reg, %reloc(sym)($reg)
#define LW16(reloc) NIT16("lw[16]", 0x1400, reloc, INS_REG(7, 3, TREG), INS_REG(4, 3, SREG))
// jalrc16 $reg
#define JALRC16(tregmap) NIT16("jalrc[16]", 0xd810, NONE, INS_REG(5, 5, tregmap), NULL)
// jrc16 $reg
#define JRC16 NIT16("jrc[16]", 0xd800, NONE, INS_REG(5, 5, SREG), NULL)
// move16 $reg
#define MOVE16 NIT16("move[16]", 0x1000, NONE, INS_REG(0, 5, TREG), INS_REG(5, 5, SREG))
// sb16 $reg, 0(sym)($reg)
#define SB16 NIT16("sb[16]", 0x5c04, NONE, INS_REG(7, 3, TREG), INS_REG(4, 3, SREG))
// sh16 $reg, 0(sym)($reg)
#define SH16 NIT16("sh[16]", 0x7c01, NONE, INS_REG(7, 3, TREG), INS_REG(4, 3, SREG))
// sw16 $reg, %gprel(sym)($gp)
#define SWGP16 NIT16("sw[gp16]", 0xd400, GPREL7_S2, INS_REG(7, 3, TREG), NULL)
// sw16 $reg, %reloc(sym)($reg)
#define SW16(reloc) NIT16("sw[16]", 0x9400, reloc, INS_REG(7, 3, TREG), INS_REG(4, 3, SREG))

//
//
// Nanomips instruction property
//
//

// Transformations for 48-bit instructions.

// addiugp[48] $reg, %gprel32(sym)
NIP48("addiugp[48]",    0x6002,        EXT_REG(5, 5))
NTT(GPREL32,           RELS(R(GPREL_I32)),                            INSNS(ADDIUGPB32))
NTT(GPREL32_WORD,      RELS(R(GPREL_I32)),                            INSNS(ADDIUGPW32))

// lapc[48] $reg, sym
NIP48("lapc[48]",       0x6003,        EXT_REG(5, 5))
NTT(PCREL32,           RELS(R(PC_I32)),                               INSNS(LAPC32(TREG)))


// Transformations for 32-bit instructions.

// balc sym
NIP32("balc",           0x2a000000,    NULL,                 NULL,                  NULL,                 NULL)
NTT(ABS_XLP,          RELS(R(PC25_S1)),                               INSNS(LI48, JALRC16(SREG)))
NTT(ABS16_LONG,       RELS(R(PC25_S1)),                               INSNS(LUI32(HI20, SREG), ORI32(LO12, SREG, SREG), JALRC16(SREG)))
NTT(ABS32_LONG,       RELS(R(PC25_S1)),                               INSNS(LUI32(HI20, SREG), ORI32(LO12, SREG, SREG), JALRC32))
NTT(PCREL16,          RELS(R(PC25_S1)),                               INSNS(BALC16))
NTT(PCREL_XLP,        RELS(R(PC25_S1)),                               INSNS(LAPC48, JALRC16(SREG)))
NTT(PCREL16_LONG,     RELS(R(PC25_S1)),                               INSNS(ALUIPC32(PC_HI20, SREG), ORI32(LO12, SREG, SREG), JALRC16(SREG)))
NTT(PCREL32_LONG,     RELS(R(PC25_S1)),                               INSNS(ALUIPC32(PC_HI20, SREG), ORI32(LO12, SREG, SREG), JALRC32))

// bc sym
NIP32("bc",             0x28000000,    NULL,                 NULL,                  NULL,                 NULL)
NTT(ABS_XLP,          RELS(R(PC25_S1)),                               INSNS(LI48, JRC16))
NTT(ABS16_LONG,       RELS(R(PC25_S1)),                               INSNS(LUI32(HI20, SREG), ORI32(LO12, SREG, SREG), JRC16))
NTT(ABS32_LONG,       RELS(R(PC25_S1)),                               INSNS(LUI32(HI20, SREG), ORI32(LO12, SREG, SREG), JRC32))
NTT(PCREL16,          RELS(R(PC25_S1)),                               INSNS(BC16))
NTT(PCREL_XLP,        RELS(R(PC25_S1)),                               INSNS(LAPC48, JRC16))
NTT(PCREL16_LONG,     RELS(R(PC25_S1)),                               INSNS(ALUIPC32(PC_HI20, SREG), ORI32(LO12, SREG, SREG), JRC16))
NTT(PCREL32_LONG,     RELS(R(PC25_S1)),                               INSNS(ALUIPC32(PC_HI20, SREG), ORI32(LO12, SREG, SREG), JRC32))

// lapc $reg, sym
NIP32("lapc",           0x04000000,    EXT_REG(21, 5),       NULL,                  NULL,                 NULL)
NTT(DISCARD,          RELS(R(PC21_S1)),                               INSNS())
NTT(ABS_XLP,          RELS(R(PC21_S1)),                               INSNS(LI48))
NTT(ABS32_LONG,       RELS(R(PC21_S1)),                               INSNS(LUI32(HI20, TREG), ORI32(LO12, TREG, TREG)))
NTT(PCREL_XLP,        RELS(R(PC21_S1)),                               INSNS(LAPC48))
NTT(PCREL32_LONG,     RELS(R(PC21_S1)),                               INSNS(ALUIPC32(PC_HI20, TREG), ORI32(LO12, TREG, TREG)))

// move.balc $reg, $reg, sym
NIP32("move.balc",      0x08000000,    move_balc_treg_32,    NULL,                  move_balc_dreg_32,    NULL)
NTT(PCREL32_LONG,     RELS(R(PC21_S1)),                               INSNS(MOVE16, BALC32))

// beqc $reg, $reg, sym
NIP32("beqc",           0x88000000,    EXT_REG(21, 5),       valid_reg,             EXT_REG(16, 5),       valid_reg)
NTT(PCREL16,          RELS(R(PC14_S1)),                               INSNS(BEQC16))
NTT(PCREL32_LONG,     RELS(R(PC14_S1)),                               INSNS(BNEC32(NONE), BC32))

// bnec $reg, $reg, sym
NIP32("bnec",           0xa8000000,    EXT_REG(21, 5),       valid_reg,             EXT_REG(16, 5),       valid_reg)
NTT(PCREL16,          RELS(R(PC14_S1)),                               INSNS(BNEC16))
NTT(PCREL32_LONG,     RELS(R(PC14_S1)),                               INSNS(BEQC32(NONE), BC32))

// bgec $reg, $reg, sym
NIP32("bgec",           0x88008000,    EXT_REG(21, 5),       NULL,                  EXT_REG(16, 5),       NULL)
NTT(PCREL32_LONG,     RELS(R(PC14_S1)),                               INSNS(BLTC32, BC32))

// bltc $reg, $reg, sym
NIP32("bltc",           0xa8008000,    EXT_REG(21, 5),       NULL,                  EXT_REG(16, 5),       NULL)
NTT(PCREL32_LONG,     RELS(R(PC14_S1)),                               INSNS(BGEC32, BC32))

// bgeuc $reg, $reg, sym
NIP32("bgeuc",          0x8800c000,    EXT_REG(21, 5),       NULL,                  EXT_REG(16, 5),       NULL)
NTT(PCREL32_LONG,     RELS(R(PC14_S1)),                               INSNS(BLTUC32, BC32))

// bltuc $reg, $reg, sym
NIP32("bltuc",          0xa800c000,    EXT_REG(21, 5),       NULL,                  EXT_REG(16, 5),       NULL)
NTT(PCREL32_LONG,     RELS(R(PC14_S1)),                               INSNS(BGEUC32, BC32))

// bbeqzc $reg, bit, sym
NIP32("bbeqzc",         0xc8040000,    EXT_REG(21, 5),       NULL,                  EXT_REG(11, 6),       NULL)
NTT(PCREL32_LONG,     RELS(R(PC11_S1)),                               INSNS(BBNEZC32, BC32))

// bbnezc $reg, bit, sym
NIP32("bbnezc",         0xc8140000,    EXT_REG(21, 5),       NULL,                  EXT_REG(11, 6),       NULL)
NTT(PCREL32_LONG,     RELS(R(PC11_S1)),                               INSNS(BBEQZC32, BC32))

// beqic $reg, u, sym
NIP32("beqic",          0xc8000000,    EXT_REG(21, 5),       NULL,                  EXT_REG(11, 7),       NULL)
NTT(PCREL32_LONG,     RELS(R(PC11_S1)),                               INSNS(BNEIC32, BC32))

// bneic $reg, u, sym
NIP32("bneic",          0xc8100000,    EXT_REG(21, 5),       NULL,                  EXT_REG(11, 7),       NULL)
NTT(PCREL32_LONG,     RELS(R(PC11_S1)),                               INSNS(BEQIC32, BC32))

// bgeic $reg, u, sym
NIP32("bgeic",          0xc8080000,    EXT_REG(21, 5),       NULL,                  EXT_REG(11, 7),       NULL)
NTT(PCREL32_LONG,     RELS(R(PC11_S1)),                               INSNS(BLTIC32, BC32))

// bltic $reg, u, sym
NIP32("bltic",          0xc8180000,    EXT_REG(21, 5),       NULL,                  EXT_REG(11, 7),       NULL)
NTT(PCREL32_LONG,     RELS(R(PC11_S1)),                               INSNS(BGEIC32, BC32))

// bgeiuc $reg, u, sym
NIP32("bgeiuc",         0xc80c0000,    EXT_REG(21, 5),       NULL,                  EXT_REG(11, 7),       NULL)
NTT(PCREL32_LONG,     RELS(R(PC11_S1)),                               INSNS(BLTIUC32, BC32))

// bltiuc $reg, u, sym
NIP32("bltiuc",         0xc81c0000,    EXT_REG(21, 5),       NULL,                  EXT_REG(11, 7),       NULL)
NTT(PCREL32_LONG,     RELS(R(PC11_S1)),                               INSNS(BGEIUC32, BC32))

// lw $reg, %reloc(sym)($gp)
NIP32("lw[gp]",         0x40000002,    EXT_REG(21, 5),       valid_reg,             NULL,                 NULL)
NTT(ABS32_LONG,       RELS(R(GPREL19_S2)),                            INSNS(LUI32(HI20, SREG), LW32(LO12)))
NTT(PCREL_XLP,        RELS(R(GPREL19_S2)),                            INSNS(LWPC48(PC_I32)))
NTT(PCREL32_LONG,     RELS(R(GPREL19_S2)),                            INSNS(ALUIPC32(PC_HI20, SREG), LW32(LO12)))
NTT(GPREL16,          RELS(R(GPREL19_S2)),                            INSNS(LWGP16))
NTT(GPREL32_XLP,      RELS(R(GPREL19_S2)),                            INSNS(ADDIUGP48(GPREL_I32, SREG), LW32(NONE)))
NTT(GPREL_LONG,       RELS(R(GPREL19_S2)),                            INSNS(LUI32(GPREL_HI20, SREG), ADDU32(SREG, SREG), LW32(GPREL_LO12)))
NTT(ABS_XLP,          RELS(R(GOT_DISP)),                              INSNS(LI48))
NTT(ABS32_LONG,       RELS(R(GOT_DISP)),                              INSNS(LUI32(HI20, TREG), ORI32(LO12, TREG, TREG)))
NTT(PCREL32,          RELS(R(GOT_DISP)),                              INSNS(LAPC32(SREG)))
NTT(PCREL_XLP,        RELS(R(GOT_DISP)),                              INSNS(LAPC48))
NTT(PCREL32_LONG,     RELS(R(GOT_DISP)),                              INSNS(ALUIPC32(PC_HI20, TREG), ORI32(LO12, TREG, TREG)))
NTT(GPREL32,          RELS(R(GOT_DISP)),                              INSNS(ADDIUGPB32))
NTT(GPREL32_WORD,     RELS(R(GOT_DISP)),                              INSNS(ADDIUGPW32))
NTT(GPREL_XLP,        RELS(R(GOT_DISP)),                              INSNS(ADDIUGP48(GPREL_I32, TREG)))
NTT(GPREL_LONG,       RELS(R(GOT_DISP)),                              INSNS(LUI32(GPREL_HI20, SREG), ORI32(GPREL_LO12, SREG, SREG), ADDU32(SREG, TREG)))
NTT(GOTPCREL_XLP,     RELS(R(TLS_GOTTPREL)),                          INSNS(LWPC48(TLS_GOTTPREL_PC_I32)))
NTT(DISCARD,          RELS(R(GOT_CALL), R(GOT_PAGE)),                 INSNS())
NTT(GOTPCREL_XLP,     RELS(R(GOT_DISP), R(GOT_CALL), R(GOT_PAGE)),    INSNS(LWPC48(GOTPC_I32)))
NTT(GOTPCREL_LONG,    RELS(R(GOT_DISP), R(GOT_CALL), R(GOT_PAGE)),    INSNS(ALUIPC32(GOTPC_HI20, TREG), LW32(GOT_LO12)))

// sw $reg, %gprel(sym)($gp)
NIP32("sw[gp]",         0x40000003,    EXT_REG(21, 5),       valid_st_src_reg,      NULL,                 NULL)
NTT(ABS32_LONG,       RELS(R(GPREL19_S2)),                            INSNS(LUI32(HI20, SREG), SW32(LO12)))
NTT(PCREL_XLP,        RELS(R(GPREL19_S2)),                            INSNS(SWPC48))
NTT(PCREL32_LONG,     RELS(R(GPREL19_S2)),                            INSNS(ALUIPC32(PC_HI20, SREG), SW32(LO12)))
NTT(GPREL16,          RELS(R(GPREL19_S2)),                            INSNS(SWGP16))
NTT(GPREL32_XLP,      RELS(R(GPREL19_S2)),                            INSNS(ADDIUGP48(GPREL_I32, SREG), SW32(NONE)))
NTT(GPREL_LONG,       RELS(R(GPREL19_S2)),                            INSNS(LUI32(GPREL_HI20, SREG), ADDU32(SREG, SREG), SW32(GPREL_LO12)))

// addiu[gp.w] $reg, $gp, %reloc(sym)
NIP32("addiu[gp.w]",    0x40000000,    EXT_REG(21, 5),       NULL,                  NULL,                 NULL)
NTT(ABS32_LONG,       RELS(R(GPREL19_S2)),                            INSNS(LUI32(HI20, SREG), ORI32(LO12, TREG, SREG)))
NTT(PCREL32_LONG,     RELS(R(GPREL19_S2)),                            INSNS(ALUIPC32(PC_HI20, SREG), ORI32(LO12, TREG, SREG)))
NTT(GPREL_XLP,        RELS(R(GPREL19_S2)),                            INSNS(ADDIUGP48(GPREL_I32, TREG)))
NTT(GPREL_LONG,       RELS(R(GPREL19_S2)),                            INSNS(LUI32(GPREL_HI20, SREG), ORI32(GPREL_LO12, SREG, SREG), ADDU32(SREG, TREG)))
NTT(GPREL_XLP,        RELS(R(TLS_GD)),                                INSNS(ADDIUGP48(TLS_GD_I32, TREG)))
NTT(GPREL_XLP,        RELS(R(TLS_LD)),                                INSNS(ADDIUGP48(TLS_LD_I32, TREG)))

// addiu[gp.b] $reg, $gp, %gprel(sym)
NIP32("addiu[gp.b]",    0x440c0000,    EXT_REG(21, 5),       NULL,                  NULL,                 NULL)
NTT(ABS32_LONG,       RELS(R(GPREL18)),                               INSNS(LUI32(HI20, SREG), ORI32(LO12, TREG, SREG)))
NTT(PCREL32_LONG,     RELS(R(GPREL18)),                               INSNS(ALUIPC32(PC_HI20, SREG), ORI32(LO12, TREG, SREG)))
NTT(GPREL_XLP,        RELS(R(GPREL18)),                               INSNS(ADDIUGP48(GPREL_I32, TREG)))
NTT(GPREL_LONG,       RELS(R(GPREL18)),                               INSNS(LUI32(GPREL_HI20, SREG), ORI32(GPREL_LO12, SREG, SREG), ADDU32(SREG, TREG)))

// lb $reg, %gprel(sym)($gp)
NIP32("lb[gp]",         0x44000000,    EXT_REG(21, 5),       NULL,                  NULL,                 NULL)
NTT(ABS32_LONG,       RELS(R(GPREL18)),                               INSNS(LUI32(HI20, SREG), LB32(LO12)))
NTT(PCREL32_LONG,     RELS(R(GPREL18)),                               INSNS(ALUIPC32(PC_HI20, SREG), LB32(LO12)))
NTT(GPREL32_XLP,      RELS(R(GPREL18)),                               INSNS(ADDIUGP48(GPREL_I32, SREG), LB32(NONE)))
NTT(GPREL_LONG,       RELS(R(GPREL18)),                               INSNS(LUI32(GPREL_HI20, SREG), ADDU32(SREG, SREG), LB32(GPREL_LO12)))

// lbu $reg, %gprel(sym)($gp)
NIP32("lbu[gp]",        0x44080000,    EXT_REG(21, 5),       NULL,                  NULL,                 NULL)
NTT(ABS32_LONG,       RELS(R(GPREL18)),                               INSNS(LUI32(HI20, SREG), LBU32(LO12)))
NTT(PCREL32_LONG,     RELS(R(GPREL18)),                               INSNS(ALUIPC32(PC_HI20, SREG), LBU32(LO12)))
NTT(GPREL32_XLP,      RELS(R(GPREL18)),                               INSNS(ADDIUGP48(GPREL_I32, SREG), LBU32(NONE)))
NTT(GPREL_LONG,       RELS(R(GPREL18)),                               INSNS(LUI32(GPREL_HI20, SREG), ADDU32(SREG, SREG), LBU32(GPREL_LO12)))

// sb $reg, %gprel(sym)($gp)
NIP32("sb[gp]",         0x44040000,    EXT_REG(21, 5),       NULL,                  NULL,                 NULL)
NTT(ABS32_LONG,       RELS(R(GPREL18)),                               INSNS(LUI32(HI20, SREG), SB32(LO12)))
NTT(PCREL32_LONG,     RELS(R(GPREL18)),                               INSNS(ALUIPC32(PC_HI20, SREG), SB32(LO12)))
NTT(GPREL32_XLP,      RELS(R(GPREL18)),                               INSNS(ADDIUGP48(GPREL_I32, SREG), SB32(NONE)))
NTT(GPREL_LONG,       RELS(R(GPREL18)),                               INSNS(LUI32(GPREL_HI20, SREG), ADDU32(SREG, SREG), SB32(GPREL_LO12)))

// lh $reg, %gprel(sym)($gp)
NIP32("lh[gp]",         0x44100000,    EXT_REG(21, 5),       NULL,                  NULL,                 NULL)
NTT(ABS32_LONG,       RELS(R(GPREL17_S1)),                            INSNS(LUI32(HI20, SREG), LH32(LO12)))
NTT(PCREL32_LONG,     RELS(R(GPREL17_S1)),                            INSNS(ALUIPC32(PC_HI20, SREG), LH32(LO12)))
NTT(GPREL32_XLP,      RELS(R(GPREL17_S1)),                            INSNS(ADDIUGP48(GPREL_I32, SREG), LH32(NONE)))
NTT(GPREL_LONG,       RELS(R(GPREL17_S1)),                            INSNS(LUI32(GPREL_HI20, SREG), ADDU32(SREG, SREG), LH32(GPREL_LO12)))

// lhu $reg, %gprel(sym)($gp)
NIP32("lhu[gp]",        0x44100001,    EXT_REG(21, 5),       NULL,                  NULL,                 NULL)
NTT(ABS32_LONG,       RELS(R(GPREL17_S1)),                            INSNS(LUI32(HI20, SREG), LHU32(LO12)))
NTT(PCREL32_LONG,     RELS(R(GPREL17_S1)),                            INSNS(ALUIPC32(PC_HI20, SREG), LHU32(LO12)))
NTT(GPREL32_XLP,      RELS(R(GPREL17_S1)),                            INSNS(ADDIUGP48(GPREL_I32, SREG), LHU32(NONE)))
NTT(GPREL_LONG,       RELS(R(GPREL17_S1)),                            INSNS(LUI32(GPREL_HI20, SREG), ADDU32(SREG, SREG), LHU32(GPREL_LO12)))

// sh $reg, %gprel(sym)($gp)
NIP32("sh[gp]",         0x44140000,    EXT_REG(21, 5),       NULL,                  NULL,                 NULL)
NTT(ABS32_LONG,       RELS(R(GPREL17_S1)),                            INSNS(LUI32(HI20, SREG), SH32(LO12)))
NTT(PCREL32_LONG,     RELS(R(GPREL17_S1)),                            INSNS(ALUIPC32(PC_HI20, SREG), SH32(LO12)))
NTT(GPREL32_XLP,      RELS(R(GPREL17_S1)),                            INSNS(ADDIUGP48(GPREL_I32, SREG), SH32(NONE)))
NTT(GPREL_LONG,       RELS(R(GPREL17_S1)),                            INSNS(LUI32(GPREL_HI20, SREG), ADDU32(SREG, SREG), SH32(GPREL_LO12)))

// lb $reg, %got_ofst(sym)($reg)
NIP32("lb",             0x84000000,    EXT_REG(21, 5),       valid_reg,             EXT_REG(16, 5),       valid_reg)
NTT(DISCARD,          RELS(R(GOT_OFST)),                              INSNS(LB16))
NTT(ABS32_LONG,       RELS(R(GOT_OFST)),                              INSNS(LUI32(HI20, SREG), LB32(LO12)))
NTT(PCREL16_LONG,     RELS(R(GOT_OFST)),                              INSNS(LAPC32(SREG), LB16))
NTT(PCREL32_LONG,     RELS(R(GOT_OFST)),                              INSNS(ALUIPC32(PC_HI20, SREG), LB32(LO12)))
NTT(GPREL32,          RELS(R(GOT_OFST)),                              INSNS(LBGP32))
NTT(GPREL_XLP,        RELS(R(GOT_OFST)),                              INSNS(ADDIUGP48(GPREL_I32, SREG), LB16))
NTT(GPREL32_XLP,      RELS(R(GOT_OFST)),                              INSNS(ADDIUGP48(GPREL_I32, SREG), LB32(NONE)))
NTT(GPREL_LONG,       RELS(R(GOT_OFST)),                              INSNS(LUI32(GPREL_HI20, SREG), ADDU32(SREG, SREG), LB32(GPREL_LO12)))

// lbu $reg, %got_ofst(sym)($reg)
NIP32("lbu",            0x84002000,    EXT_REG(21, 5),       valid_reg,             EXT_REG(16, 5),       valid_reg)
NTT(DISCARD,          RELS(R(GOT_OFST)),                              INSNS(LBU16))
NTT(ABS32_LONG,       RELS(R(GOT_OFST)),                              INSNS(LUI32(HI20, SREG), LBU32(LO12)))
NTT(PCREL16_LONG,     RELS(R(GOT_OFST)),                              INSNS(LAPC32(SREG), LBU16))
NTT(PCREL32_LONG,     RELS(R(GOT_OFST)),                              INSNS(ALUIPC32(PC_HI20, SREG), LBU32(LO12)))
NTT(GPREL32,          RELS(R(GOT_OFST)),                              INSNS(LBUGP32))
NTT(GPREL_XLP,        RELS(R(GOT_OFST)),                              INSNS(ADDIUGP48(GPREL_I32, SREG), LBU16))
NTT(GPREL32_XLP,      RELS(R(GOT_OFST)),                              INSNS(ADDIUGP48(GPREL_I32, SREG), LBU32(NONE)))
NTT(GPREL_LONG,       RELS(R(GOT_OFST)),                              INSNS(LUI32(GPREL_HI20, SREG), ADDU32(SREG, SREG), LBU32(GPREL_LO12)))

// lh $reg, %got_ofst(sym)($reg)
NIP32("lh",             0x84004000,    EXT_REG(21, 5),       valid_reg,             EXT_REG(16, 5),       valid_reg)
NTT(DISCARD,          RELS(R(GOT_OFST)),                              INSNS(LH16))
NTT(ABS32_LONG,       RELS(R(GOT_OFST)),                              INSNS(LUI32(HI20, SREG), LH32(LO12)))
NTT(PCREL16_LONG,     RELS(R(GOT_OFST)),                              INSNS(LAPC32(SREG), LH16))
NTT(PCREL32_LONG,     RELS(R(GOT_OFST)),                              INSNS(ALUIPC32(PC_HI20, SREG), LH32(LO12)))
NTT(GPREL32,          RELS(R(GOT_OFST)),                              INSNS(LHGP32))
NTT(GPREL_XLP,        RELS(R(GOT_OFST)),                              INSNS(ADDIUGP48(GPREL_I32, SREG), LH16))
NTT(GPREL32_XLP,      RELS(R(GOT_OFST)),                              INSNS(ADDIUGP48(GPREL_I32, SREG), LH32(NONE)))
NTT(GPREL_LONG,       RELS(R(GOT_OFST)),                              INSNS(LUI32(GPREL_HI20, SREG), ADDU32(SREG, SREG), LH32(GPREL_LO12)))

// lhu $reg, %got_ofst(sym)($reg)
NIP32("lhu",            0x84006000,    EXT_REG(21, 5),       valid_reg,             EXT_REG(16, 5),       valid_reg)
NTT(DISCARD,          RELS(R(GOT_OFST)),                              INSNS(LHU16))
NTT(ABS32_LONG,       RELS(R(GOT_OFST)),                              INSNS(LUI32(HI20, SREG), LHU32(LO12)))
NTT(PCREL16_LONG,     RELS(R(GOT_OFST)),                              INSNS(LAPC32(SREG), LHU16))
NTT(PCREL32_LONG,     RELS(R(GOT_OFST)),                              INSNS(ALUIPC32(PC_HI20, SREG), LHU32(LO12)))
NTT(GPREL32,          RELS(R(GOT_OFST)),                              INSNS(LHUGP32))
NTT(GPREL_XLP,        RELS(R(GOT_OFST)),                              INSNS(ADDIUGP48(GPREL_I32, SREG), LHU16))
NTT(GPREL32_XLP,      RELS(R(GOT_OFST)),                              INSNS(ADDIUGP48(GPREL_I32, SREG), LHU32(NONE)))
NTT(GPREL_LONG,       RELS(R(GOT_OFST)),                              INSNS(LUI32(GPREL_HI20, SREG), ADDU32(SREG, SREG), LHU32(GPREL_LO12)))

// lw $reg, %reloc(sym)($reg)
NIP32("lw",             0x84008000,    EXT_REG(21, 5),       valid_reg,             EXT_REG(16, 5),       valid_reg)
NTT(ABS16,            RELS(R(LO12)),                                  INSNS(LW16(LO4_S2)))
NTT(DISCARD,          RELS(R(GOT_OFST)),                              INSNS(LW16(NONE)))
NTT(ABS32_LONG,       RELS(R(GOT_OFST)),                              INSNS(LUI32(HI20, SREG), LW32(LO12)))
NTT(PCREL_XLP,        RELS(R(GOT_OFST)),                              INSNS(LWPC48(PC_I32)))
NTT(PCREL16_LONG,     RELS(R(GOT_OFST)),                              INSNS(LAPC32(SREG), LW16(NONE)))
NTT(PCREL32_LONG,     RELS(R(GOT_OFST)),                              INSNS(ALUIPC32(PC_HI20, SREG), LW32(LO12)))
NTT(GPREL16,          RELS(R(GOT_OFST)),                              INSNS(LWGP16))
NTT(GPREL32_WORD,     RELS(R(GOT_OFST)),                              INSNS(LWGP32))
NTT(GPREL_XLP,        RELS(R(GOT_OFST)),                              INSNS(ADDIUGP48(GPREL_I32, SREG), LW16(NONE)))
NTT(GPREL32_XLP,      RELS(R(GOT_OFST)),                              INSNS(ADDIUGP48(GPREL_I32, SREG), LW32(NONE)))
NTT(GPREL_LONG,       RELS(R(GOT_OFST)),                              INSNS(LUI32(GPREL_HI20, SREG), ADDU32(SREG, SREG), LW32(GPREL_LO12)))

// restore u, dst1, [dst2, ...] where gp = 1
NIP32("restore[gp]",    0x80003006,    EXT_REG(16, 4),       NULL,                  ext_sres_fields,      NULL)
NTT(DISCARD,          RELS(R(SAVERESTORE)),                           INSNS(RESTORE32))

// restore.jrc u, dst1, [dst2, ...] where gp = 1
NIP32("restore.jrc[gp]",0x80003007,    EXT_REG(16, 4),       NULL,                  ext_sres_fields,      NULL)
NTT(DISCARD,          RELS(R(SAVERESTORE)),                           INSNS(RESTOREJRC32))

// save u, src1, [src2, ...] where gp = 1
NIP32("save[gp]",       0x80003004,    EXT_REG(16, 4),       NULL,                  ext_sres_fields,      NULL)
NTT(DISCARD,          RELS(R(SAVERESTORE)),                           INSNS(SAVE32))

// sb $reg, %got_ofst(sym)($reg)
NIP32("sb",             0x84001000,    EXT_REG(21, 5),       valid_st_src_reg,      EXT_REG(16, 5),       valid_reg)
NTT(DISCARD,          RELS(R(GOT_OFST)),                              INSNS(SB16))
NTT(ABS32_LONG,       RELS(R(GOT_OFST)),                              INSNS(LUI32(HI20, SREG), SB32(LO12)))
NTT(PCREL16_LONG,     RELS(R(GOT_OFST)),                              INSNS(LAPC32(SREG), SB16))
NTT(PCREL32_LONG,     RELS(R(GOT_OFST)),                              INSNS(ALUIPC32(PC_HI20, SREG), SB32(LO12)))
NTT(GPREL32,          RELS(R(GOT_OFST)),                              INSNS(SBGP32))
NTT(GPREL_XLP,        RELS(R(GOT_OFST)),                              INSNS(ADDIUGP48(GPREL_I32, SREG), SB16))
NTT(GPREL32_XLP,      RELS(R(GOT_OFST)),                              INSNS(ADDIUGP48(GPREL_I32, SREG), SB32(NONE)))
NTT(GPREL_LONG,       RELS(R(GOT_OFST)),                              INSNS(LUI32(GPREL_HI20, SREG), ADDU32(SREG, SREG), SB32(GPREL_LO12)))

// sh $reg, %got_ofst(sym)($reg)
NIP32("sh",             0x84005000,    EXT_REG(21, 5),       valid_st_src_reg,      EXT_REG(16, 5),       valid_reg)
NTT(DISCARD,          RELS(R(GOT_OFST)),                              INSNS(SH16))
NTT(ABS32_LONG,       RELS(R(GOT_OFST)),                              INSNS(LUI32(HI20, SREG), SH32(LO12)))
NTT(PCREL16_LONG,     RELS(R(GOT_OFST)),                              INSNS(LAPC32(SREG), SH16))
NTT(PCREL32_LONG,     RELS(R(GOT_OFST)),                              INSNS(ALUIPC32(PC_HI20, SREG), SH32(LO12)))
NTT(GPREL32,          RELS(R(GOT_OFST)),                              INSNS(SHGP32))
NTT(GPREL_XLP,        RELS(R(GOT_OFST)),                              INSNS(ADDIUGP48(GPREL_I32, SREG), SH16))
NTT(GPREL32_XLP,      RELS(R(GOT_OFST)),                              INSNS(ADDIUGP48(GPREL_I32, SREG), SH32(NONE)))
NTT(GPREL_LONG,       RELS(R(GOT_OFST)),                              INSNS(LUI32(GPREL_HI20, SREG), ADDU32(SREG, SREG), SH32(GPREL_LO12)))

// sw $reg, %reloc(sym)($reg)
NIP32("sw",             0x84009000,    EXT_REG(21, 5),       valid_st_src_reg,      EXT_REG(16, 5),       valid_reg)
NTT(ABS16,            RELS(R(LO12)),                                  INSNS(SW16(LO4_S2)))
NTT(DISCARD,          RELS(R(GOT_OFST)),                              INSNS(SW16(NONE)))
NTT(ABS32_LONG,       RELS(R(GOT_OFST)),                              INSNS(LUI32(HI20, SREG), SW32(LO12)))
NTT(PCREL_XLP,        RELS(R(GOT_OFST)),                              INSNS(SWPC48))
NTT(PCREL16_LONG,     RELS(R(GOT_OFST)),                              INSNS(LAPC32(SREG), SW16(NONE)))
NTT(PCREL32_LONG,     RELS(R(GOT_OFST)),                              INSNS(ALUIPC32(PC_HI20, SREG), SW32(LO12)))
NTT(GPREL16,          RELS(R(GOT_OFST)),                              INSNS(SWGP16))
NTT(GPREL32_WORD,     RELS(R(GOT_OFST)),                              INSNS(SWGP32))
NTT(GPREL_XLP,        RELS(R(GOT_OFST)),                              INSNS(ADDIUGP48(GPREL_I32, SREG), SW16(NONE)))
NTT(GPREL32_XLP,      RELS(R(GOT_OFST)),                              INSNS(ADDIUGP48(GPREL_I32, SREG), SW32(NONE)))
NTT(GPREL_LONG,       RELS(R(GOT_OFST)),                              INSNS(LUI32(GPREL_HI20, SREG), ADDU32(SREG, SREG), SW32(GPREL_LO12)))

// jalrc $ra, $reg
NIP32("jalrc",          0x4be00000,    NULL,                 NULL,                  EXT_REG(16, 5),       NULL)
NTT(ABS32_LONG,       RELS(R(JALR32)),                                INSNS(LUI32(HI20, SREG), ORI32(LO12, SREG, SREG), JALRC32))
NTT(PCREL32,          RELS(R(JALR32)),                                INSNS(BALC32))
NTT(PCREL32_LONG,     RELS(R(JALR32)),                                INSNS(ALUIPC32(PC_HI20, SREG), ORI32(LO12, SREG, SREG), JALRC32))


// Transformations for 16-bit instructions.

// bc16 sym
NIP16("bc[16]",         0x1800,        NULL,                 NULL,                  NULL,                 NULL)
NTT(PCREL32,          RELS(R(PC10_S1)),                               INSNS(BC32))

// balc16 sym
NIP16("balc[16]",       0x3800,        NULL,                 NULL,                  NULL,                 NULL)
NTT(PCREL32,          RELS(R(PC10_S1)),                               INSNS(BALC32))

// beqzc16 $reg, sym
NIP16("beqzc[16]",      0x9800,        EXT_REG(7, 3),        convert_reg,           NULL,                 NULL)
NTT(PCREL32,          RELS(R(PC7_S1)),                                INSNS(BEQC32(PC14_S1)))

// bnezc16 $reg, sym
NIP16("bnezc[16]",      0xb800,        EXT_REG(7, 3),        convert_reg,           NULL,                 NULL)
NTT(PCREL32,          RELS(R(PC7_S1)),                                INSNS(BNEC32(PC14_S1)))

// beqc16/bnec16 $reg, $reg, sym
NIP16("bxxc[16]",       0xd800,        EXT_REG(7, 3),        convert_reg,           EXT_REG(4, 3),        convert_reg)
NTT(BEQC32,           RELS(R(PC4_S1)),                                INSNS(BEQC32(PC14_S1)))
NTT(BNEC32,           RELS(R(PC4_S1)),                                INSNS(BNEC32(PC14_S1)))

// lw16 $reg, %gprel(sym)($gp)
NIP16("lw[gp16]",       0x5400,        EXT_REG(7, 3),        convert_reg,           NULL,                 NULL)
NTT(GPREL32_WORD,     RELS(R(GPREL7_S2)),                             INSNS(LWGP32))

// sw16 $reg, %gprel(sym)($gp)
NIP16("sw[gp16]",       0xd400,        EXT_REG(7, 3),        convert_st_src_reg,    NULL,                 NULL)
NTT(GPREL32_WORD,     RELS(R(GPREL7_S2)),                             INSNS(SWGP32))

// lw16 $reg, %lo(sym)($reg)
NIP16("lw[16]",         0x1400,        EXT_REG(7, 3),        convert_reg,           EXT_REG(4, 3),        convert_reg)
NTT(ABS32,            RELS(R(LO4_S2)),                                INSNS(LW32(LO12)))

// sw16 $reg, %lo(sym)($reg)
NIP16("sw[16]",         0x9400,        EXT_REG(7, 3),        convert_st_src_reg,    EXT_REG(4, 3),        convert_reg)
NTT(ABS32,            RELS(R(LO4_S2)),                                INSNS(SW32(LO12)))

// jalrc16 $ra, $reg
NIP16("jalrc[16]",      0xd810,        EXT_REG(5, 5),        NULL,                  NULL,                 NULL)
NTT(ABS_XLP,          RELS(R(JALR16)),                                INSNS(LI48, JALRC16(TREG)))
NTT(ABS16_LONG,       RELS(R(JALR16)),                                INSNS(LUI32(HI20, TREG), ORI32(LO12, TREG, TREG), JALRC16(TREG)))
NTT(PCREL16,          RELS(R(JALR16)),                                INSNS(BALC16))
NTT(PCREL32,          RELS(R(JALR16)),                                INSNS(BALC32))
NTT(PCREL_XLP,        RELS(R(JALR16)),                                INSNS(LAPC48, JALRC16(TREG)))
NTT(PCREL16_LONG,     RELS(R(JALR16)),                                INSNS(ALUIPC32(PC_HI20, TREG), ORI32(LO12, TREG, TREG), JALRC16(TREG)))
